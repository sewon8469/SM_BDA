

##########################################
# day6
##########################################

##########################################
#데이터 다운로드

# UCI 머신러닝 저장소 사이트 접속
browseURL('http://archive.ics.uci.edu/ml')

# 다운로드 대상파일 링크 준비
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
url
class(url)

# 기본패키지 read.table() 함수를 이용해 # 온라인상의 데이터셋파일 로딩
iris <- read.table(file = url, header = FALSE, sep = ',')
iris

class(iris)
str(iris)

names(iris) <- c('sepal_length', 'sepal_width', 
                 'petal_length', 'petal_width', 'species')

#특정문자 삭제
iris$species <- gsub('Iris-', '',iris$species)

head(iris)


######################
# 결측값 처리
######################

z <- c(1,2,3,NA,5,NA,8)      # 결측값이 포함된 벡터
z
sum(z)                       # 정상 계산이 안됨
is.na(z)                     # NA 여부 확인
sum(is.na(z))                # NA의 개수 확인
sum(z, na.rm=TRUE)           # NA를 제외하고 합계를 계산
z1 <- c(1,2,3,NA,5,NA,8)      # 결측값이 포함된 벡터 z1
z2 <- c(5,8,1,NA,3,NA,7)      # 결측값이 포함된 벡터 z2
z1[is.na(z1)] <- 0            # NA를 0으로 치환 
z1                            

z3 <- as.vector(na.omit(z2))  # NA를 제거하고 새로운 벡터 생성
z3 # NA를 포함하는 test 데이터 생성

x <- iris
x[1,2]<- NA
x[1,3]<- NA
x[2,3]<- NA
x[3,4]<- NA  
head(x)

# 결측치 세리기
# for문을 이용한 방법
for (i in 1:ncol(x)) {
  this.na <- is.na(x[,i]) 
  cat(colnames(x)[i], "\t", sum(this.na), "\n")
}


# apply를 이용한 방법
col_na <- function(y) {
  return(sum(is.na(y)))
}

na_count <- apply(x, 2, FUN=col_na)
na_count

rowSums(is.na(x))            # 행별 NA의 개수  
sum(rowSums(is.na(x))>0)     # NA가 포함된 행의 개수 
sum(is.na(x))                # 데이터셋 전체에서 NA 개수

head(x)
x[!complete.cases(x),]              # NA가 포함된 행들 출력
y <- x[complete.cases(x),]          # NA가 포함된 행들 제거
head(y)                             # 새로운 데이터셋 y의 내용 확인

######################
# 특이값 처리
######################

st <- data.frame(state.x77)
boxplot(st$Income)
boxplot.stats(st$Income)$out
out.val <- boxplot.stats(st$Income)$out     # 특이값 추출
st$Income[st$Income %in% out.val] <- NA     # 특이값을 NA로 대체
head(st)

newdata <- st[complete.cases(st),]          # NA가 포함된 행 제거
head(newdata)


######################
# 데이터 정렬
######################
v1 <- c(1,7,6,8,4,2,3)
order(v1)
v1 <- sort(v1)                  # 오름차순
v1
v2 <- sort(v1, decreasing=T)    # 내림차순 
v2

head(iris)
order(iris$sepal_length)
iris[order(iris$sepal_length),]                   # 오름차순으로 정렬
iris[order(iris$sepal_length, decreasing=T),]     # 내림차순으로 정렬
iris.new <- iris[order(iris$sepal_length),]       # 정렬된 데이터를 저장
head(iris.new)
iris[order(iris$species, decreasing=T, iris$petal_length),]  # 정렬 기준이 2개


######################
# 데이터 분리
######################
sp <- split(iris, iris$species)       # 품종별로 데이터 분리
sp                                    # 분리 결과 확인 
summary(sp)                           # 분리 결과 요약
sp$setosa                             # setosa 품종의 데이터 확인


######################
# 데이터 선택
######################
subset(iris, species == "setosa")
subset(iris, sepal_length > 7.5)
subset(iris, sepal_length > 5.1 & sepal_width > 3.9)
subset(iris, sepal_length > 7.6, select=c(petal_length, petal_width))


######################
# 데이터 샘플링
######################
x <- 1:100
y <- sample(x, size=10, replace = FALSE)  # 비복원추출
y

idx <- sample(1:nrow(iris), size=50, 
               replace = FALSE)
iris.50 <- iris[idx,]      # 50개의 행 추출
dim(iris.50)               # 행과 열의 개수 확인
head(iris.50)

sample(1:20, size=5)
sample(1:20, size=5)
sample(1:20, size=5)
set.seed(100)
sample(1:20, size=5)
set.seed(100)
sample(1:20, size=5)
set.seed(100)
sample(1:20, size=5)

######################
# 데이터 조합
######################
combn(1:5,3)               # 1~5에서 3개를 뽑는 조합 
x = c("red","green","blue","black","white")
com <- combn(x,2)          # x의 원소를 2개씩 뽑는 조합 
com

for(i in 1:ncol(com)) {    # 조합을 출력
  cat(com[,i], "\n")
}

######################
# 데이터 집계
######################
agg <- aggregate(iris[,-5], by=list(iris$species), 
                 FUN=mean)
agg

agg <- aggregate(iris[,-5], by=list(표준편차=iris$species), 
                    FUN=sd)
agg

head(mtcars)
agg <- aggregate(mtcars, by=list(cyl=mtcars$cyl,
                                 vs=mtcars$vs),FUN=max)
agg

x <- data.frame(name=c("a","b","c"), math=c(90,80,40))
y <- data.frame(name=c("a","b","d"), korean=c(75,60,90))
x
y
z <- merge(x,y, by=c("name"))
z

merge(x,y, all.x=T)    # 첫 번째 데이터셋의 행들은 모두 표시되게
merge(x,y, all.y=T)    # 두 번째 데이터셋의 행들은 모두 표시되게
merge(x,y, all=T)      # 두 데이터셋의 모든 행들이 표시되도록


######################
# 데이터 병합
######################
x <- data.frame(name=c("a","b","c"), math=c(90,80,40))
y <- data.frame(sname=c("a","b","d"), korean=c(75,60,90))
x                    # 병합 기준 열의 이름이 name
y                    # 병합 기준 열의 이름이 sname
merge(x,y, by.x=c("name"), by.y=c("sname"))


######################
# 데이터 시각화
######################
######################
# 트리맵(treemap)
######################

library(treemap)                     # treemap 패키지 불러오기
data(GNI2014)                        # 데이터 불러오기 
head(GNI2014)                        # 데이터 내용보기 
treemap(GNI2014,
        index=c("continent","iso3"), # 계층구조 설정(대륙-국가)
        vSize="population",          # 타일의 크기
        vColor="GNI",                # 타일의 컬러
        type="value",                # 타일 컬러링 방법
        bg.labels="yellow",          # 레이블의 배경색
        title="World's GNI")         # 트리맵 제목  library(treemap)                  # treemap 패키지 불러오기

st <- data.frame(state.x77)       # 매트릭스를 데이터프레임으로 변환
st <- data.frame(st, stname=rownames(st)) # 주 이름 열 stname을 추가 
colnames(st)
treemap(st,
        index=c("stname"),       # 타일에 주 이름 표기
        vSize="Area",            # 타일의 크기
        vColor="Income",         # 타일의 컬러
        type="value",            # 타일 컬러링 방법
        title="USA states area and income" ) # 트리맵의 제목




######################
# 버블차트(bubble chart)
######################

st <- data.frame(state.x77)       # 매트릭스를 데이터프레임으로 변환
symbols(st$Illiteracy, st$Murder, # 원의 x, y 좌표의 열
        circles=st$Population,    # 원의 반지름의 열
        inches=0.3,               # 원의 크기 조절값
        fg="white",               # 원의 테두리 색 
        bg="lightgray",           # 원의 바탕색
        lwd=1.5,                  # 원의 테두리선 두께
        xlab="rate of Illiteracy", 
        ylab="crime(murder) rate",
        main="Illiteracy and Crime")

text(st$Illiteracy, st$Murder,    # 텍스트가 출력될 x, y 좌표
     rownames(st),                # 출력할 텍스트
     cex=0.6,                     # 폰트 크기
     col="brown")                 # 폰트 컬러



######################
# 모자이크 플롯(mosaic plot)
######################
head(mtcars)
mosaicplot(~gear+vs, data = mtcars, color=TRUE, 
           main ="Gear and Vs")

######################
# 막대그래프(bar plot)
######################
library(ggplot2)
month <- c(1,2,3,4,5,6)
rain  <- c(55,50,45,50,60,70)
df <- data.frame(month,rain)           # 그래프를 작성할 대상 데이터
df

ggplot(df, aes(x=month,y=rain)) +      # 그래프를 그릴 데이터 지정
  geom_bar(stat="identity",            # 막대의 높이는 y축에 해당하는 열의 값  
           width=0.7,                  # 막대의 폭 지정
           fill="steelblue")           # 막대의 색 지정

ggplot(df, aes(x=month,y=rain)) +      # 그래프를 그릴 데이터 지정
  geom_bar(stat="identity",            # 막대 높이는 y축에 해당하는 열의 값  
           width=0.7,                  # 막대의 폭 지정
           fill="steelblue") +         # 막대의 색 지정
  ggtitle("월별 강수량") +             # 그래프의 제목 지정
  theme(plot.title = element_text(size=25, face="bold", colour="steelblue")) +
  labs(x="월",y="강수량") +            # 그래프의 x, y축 레이블 지정
  coord_flip()                         # 그래프를 가로 방향으로 출력


######################
# 히스토그램(histogram)
######################
library(ggplot2)
ggplot(iris, aes(x=petal_length)) +     # 그래프를 그릴 데이터 지정
  geom_histogram(binwidth=0.5)          # 히스토그램 작성 library(ggplot2)

ggplot(iris, aes(x=sepal_width, fill=species, color=species)) +
  geom_histogram(binwidth = 0.5, position="dodge") +
  theme(legend.position="top")

library(ggplot2)
ggplot(data=iris, aes(x=petal_length, y=petal_width)) + 
  geom_point()library(ggplot2)

ggplot(data=iris, aes(x=petal_length, y=petal_width,
                      color=species)) + 
  geom_point(size=3) +
  ggtitle("꽃잎의 길이와 폭") +              # 그래프의 제목 지정
  theme(plot.title = element_text(size=25, face="bold", colour="steelblue")) 


######################
# 산점도(scatter plot)
######################
library(ggplot2)

ggplot(data=iris, aes(y=petal_length)) + 
  geom_boxplot(fill="yellow")

ggplot(data=iris, aes(y=petal_length, fill=species)) + 
  geom_boxplot()


ggplot(data=iris, aes(x=petal_length, y=petal_width, color=species)) + 
  geom_point(size=3) +
  ggtitle("꽃잎의 길이와 폭") +            # 그래프의 제목 지정
  theme(plot.title = element_text(size=25, face="bold", colour="steelblue")) 


######################
# 상자그림(box plot)
######################

ggplot(data=iris, aes(y=petal_length)), geom_boxplot(fill="yellow") 

ggplot(data=iris, aes(y=petal_length, fill=species)) +  geom_boxplot() 


######################
# 선그래프
######################

year <- 1937:1960
cnt <- as.vector(airmiles)
df <- data.frame(year,cnt)              # 데이터 준비
head(df)

ggplot(data=df, aes(x=year,y=cnt)) +   # 선그래프 작성
  geom_line(col="red")

library(Rtsne)
